performance_testing_conditions:
  # In 2 out of 3 tests, the test/success rate should be at least 0.8 after 150000 steps.

  total_runs: 3 # How many runs in total:

  succ_runs: 2 # This number of runs should meet the conditions:

  eval_columns: test/success_rate # This is what we evaluate to determine success. Will use this to override the \'early_stop_data_column\' parameter of main.yaml

  eval_value: 0.8 # This is the value we determine for success. Will use this to determine and override the \'early_stop_threshold\' parameter of main.yaml

  max_steps: 150000 # This is the time limit for checking the success. Will use this and the \'eval_after_n_steps\' parameter of main.yaml to determine the n_epochs parameter in main.yaml.


main_overrides: # These are the overrides for main.yaml
  algorithm: hac
  env: 'AntMaze-v1'

  # The n last epochs over which to average for determining early stopping condition.
  early_stop_last_n: 4

alg_overrides:
  # Steps per level from highest to lowest, separated by comma. There must be one -1
  # in the list to indicates the layer where the time scale is determined from the
  # environment's predefined steps.
  time_scales:
    - 20
    - 20

  # The percentage of subgoals to test.
  subgoal_test_perc: 0.0

hydra:
  sweeper:
    study_name: hac_2_layer_AntMaze-v0
    storage: sqlite:///hac_2_layer_AntMaze-v0.db

    search_space:
      algorithm.learning_rates.0:
        type: float
        low: 0.0015
        high: 0.005
        log: true

      algorithm.learning_rates.1:
        type: float
        low: 0.0002
        high: 0.0007
        log: true

      algorithm.time_scales.0:
        type: int
        low: 15
        high: 25
        step: 10

      algorithm.time_scales.1:
        type: int
        low: 15
        high: 25
        step: 10

      algorithm.n_sampled_goal:
        type: int
        low: 6
        high: 10
        step: 2

      algorithm.subgoal_test_perc:
        type: float
        low: 0.0
        high: 0.6
        step: 0.2

      algorithm.goal_selection_strategy:
        type: categorical
        choices:
          - future
          - future2
          - rndend
          - rndend2

      algorithm.use_action_replay:
        type: categorical
        choices:
          - 1
          - 0

      algorithm.ep_early_done_on_succ:
        type: int
        low: 0
        high: 1
        step: 1

      algorithm.hindsight_sampling_done_if_success:
        type: categorical
        choices:
          - 1
          - 0

      algorithm.set_fut_ret_zero_if_done:
        type: categorical
        choices:
          - 1
          - 0